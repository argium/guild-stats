//---------------------------------------------------------------------
// This code was automatically generated by Linq2GraphQL
// Please don't edit this file
// Github:https://github.com/linq2graphql/linq2graphql.client
// Url: https://linq2graphql.com
//---------------------------------------------------------------------

using System.Collections.Generic;
using System;
using Linq2GraphQL.Client;

namespace WarcraftLogs.Public;

public class QueryMethods
{
    private readonly GraphClient client;

    public QueryMethods(GraphClient client)
    {
        this.client = client;
    }

    public GraphQuery<CharacterData> CharacterData()
    {
	    var arguments = new List<ArgumentValue>
        {
        };

        return new GraphQuery<CharacterData>(client,  "characterData", OperationType.Query, arguments); 
    }

    public GraphQuery<GameData> GameData()
    {
	    var arguments = new List<ArgumentValue>
        {
        };

        return new GraphQuery<GameData>(client,  "gameData", OperationType.Query, arguments); 
    }

    public GraphQuery<GuildData> GuildData()
    {
	    var arguments = new List<ArgumentValue>
        {
        };

        return new GraphQuery<GuildData>(client,  "guildData", OperationType.Query, arguments); 
    }

    public GraphQuery<ProgressRaceData> ProgressRaceData()
    {
	    var arguments = new List<ArgumentValue>
        {
        };

        return new GraphQuery<ProgressRaceData>(client,  "progressRaceData", OperationType.Query, arguments); 
    }

    public GraphQuery<RateLimitData> RateLimitData()
    {
	    var arguments = new List<ArgumentValue>
        {
        };

        return new GraphQuery<RateLimitData>(client,  "rateLimitData", OperationType.Query, arguments); 
    }

    public GraphQuery<ReportData> ReportData()
    {
	    var arguments = new List<ArgumentValue>
        {
        };

        return new GraphQuery<ReportData>(client,  "reportData", OperationType.Query, arguments); 
    }

    public GraphQuery<UserData> UserData()
    {
	    var arguments = new List<ArgumentValue>
        {
        };

        return new GraphQuery<UserData>(client,  "userData", OperationType.Query, arguments); 
    }

    public GraphQuery<WorldData> WorldData()
    {
	    var arguments = new List<ArgumentValue>
        {
        };

        return new GraphQuery<WorldData>(client,  "worldData", OperationType.Query, arguments); 
    }

    }
