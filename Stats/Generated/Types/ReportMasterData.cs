//---------------------------------------------------------------------
// This code was automatically generated by Linq2GraphQL
// Please don't edit this file
// Github:https://github.com/linq2graphql/linq2graphql.client
// Url: https://linq2graphql.com
//---------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Linq2GraphQL.Client;
using Linq2GraphQL.Client.Common;

namespace WarcraftLogs.Public;


public static class ReportMasterDataExtensions
{
    [GraphMethod("actors")]
    public static List<ReportActor> Actors(this ReportMasterData  reportMasterData, [GraphArgument("String")] string type = null, [GraphArgument("String")] string subType = null)
    {
        return reportMasterData.GetMethodValue<List<ReportActor>>("actors", type, subType);
    }

}

/// <summary>
/// The ReporMastertData object contains information about the log version of a report, as well as the actors and abilities used in the report.
/// </summary>
public partial class ReportMasterData : GraphQLTypeBase
{
    /// <summary>
    /// The version of the client parser that was used to parse and upload this log file.
    /// </summary>
    [JsonPropertyName("logVersion")]
    public int LogVersion { get; set; }

    /// <summary>
    /// The version of the game that generated the log file. Used to distinguish Classic and Retail Warcraft primarily.
    /// </summary>
    [JsonPropertyName("gameVersion")]
    public int? GameVersion { get; set; }

    /// <summary>
    /// The auto-detected locale of the report. This is the source language of the original log file.
    /// </summary>
    [JsonPropertyName("lang")]
    public string Lang { get; set; }

    /// <summary>
    /// A list of every ability that occurs in the report.
    /// </summary>
    [JsonPropertyName("abilities")]
    public List<ReportAbility> Abilities { get; set; }

    private LazyProperty<List<ReportActor>> _actors = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public List<ReportActor> Actors => _actors.Value(() => GetFirstMethodValue<List<ReportActor>>("actors"));

}
