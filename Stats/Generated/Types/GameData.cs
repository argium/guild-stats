//---------------------------------------------------------------------
// This code was automatically generated by Linq2GraphQL
// Please don't edit this file
// Github:https://github.com/linq2graphql/linq2graphql.client
// Url: https://linq2graphql.com
//---------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Linq2GraphQL.Client;
using Linq2GraphQL.Client.Common;

namespace WarcraftLogs.Public;


public static class GameDataExtensions
{
    [GraphMethod("abilities")]
    public static GameAbilityPagination Abilities(this GameData  gameData, [GraphArgument("Int")] int? limit = null, [GraphArgument("Int")] int? page = null)
    {
        return gameData.GetMethodValue<GameAbilityPagination>("abilities", limit, page);
    }

    [GraphMethod("ability")]
    public static GameAbility Ability(this GameData  gameData, [GraphArgument("Int")] int? id = null)
    {
        return gameData.GetMethodValue<GameAbility>("ability", id);
    }

    [GraphMethod("achievement")]
    public static GameAchievement Achievement(this GameData  gameData, [GraphArgument("Int")] int? id = null)
    {
        return gameData.GetMethodValue<GameAchievement>("achievement", id);
    }

    [GraphMethod("achievements")]
    public static GameAchievementPagination Achievements(this GameData  gameData, [GraphArgument("Int")] int? limit = null, [GraphArgument("Int")] int? page = null)
    {
        return gameData.GetMethodValue<GameAchievementPagination>("achievements", limit, page);
    }

    [GraphMethod("affix")]
    public static GameAffix Affix(this GameData  gameData, [GraphArgument("Int")] int? id = null)
    {
        return gameData.GetMethodValue<GameAffix>("affix", id);
    }

    [GraphMethod("class")]
    public static GameClass Class(this GameData  gameData, [GraphArgument("Int")] int? id = null, [GraphArgument("Int")] int? faction_id = null, [GraphArgument("Int")] int? zone_id = null)
    {
        return gameData.GetMethodValue<GameClass>("class", id, faction_id, zone_id);
    }

    [GraphMethod("classes")]
    public static List<GameClass> Classes(this GameData  gameData, [GraphArgument("Int")] int? faction_id = null, [GraphArgument("Int")] int? zone_id = null)
    {
        return gameData.GetMethodValue<List<GameClass>>("classes", faction_id, zone_id);
    }

    [GraphMethod("enchant")]
    public static GameEnchant Enchant(this GameData  gameData, [GraphArgument("Int")] int? id = null)
    {
        return gameData.GetMethodValue<GameEnchant>("enchant", id);
    }

    [GraphMethod("enchants")]
    public static GameEnchantPagination Enchants(this GameData  gameData, [GraphArgument("Int")] int? limit = null, [GraphArgument("Int")] int? page = null)
    {
        return gameData.GetMethodValue<GameEnchantPagination>("enchants", limit, page);
    }

    [GraphMethod("item")]
    public static GameItem Item(this GameData  gameData, [GraphArgument("Int")] int? id = null)
    {
        return gameData.GetMethodValue<GameItem>("item", id);
    }

    [GraphMethod("item_set")]
    public static GameItemSet Item_set(this GameData  gameData, [GraphArgument("Int")] int? id = null)
    {
        return gameData.GetMethodValue<GameItemSet>("item_set", id);
    }

    [GraphMethod("item_sets")]
    public static GameItemSetPagination Item_sets(this GameData  gameData, [GraphArgument("Int")] int? limit = null, [GraphArgument("Int")] int? page = null)
    {
        return gameData.GetMethodValue<GameItemSetPagination>("item_sets", limit, page);
    }

    [GraphMethod("items")]
    public static GameItemPagination Items(this GameData  gameData, [GraphArgument("Int")] int? limit = null, [GraphArgument("Int")] int? page = null)
    {
        return gameData.GetMethodValue<GameItemPagination>("items", limit, page);
    }

    [GraphMethod("map")]
    public static GameMap Map(this GameData  gameData, [GraphArgument("Int")] int? id = null)
    {
        return gameData.GetMethodValue<GameMap>("map", id);
    }

    [GraphMethod("maps")]
    public static GameMapPagination Maps(this GameData  gameData, [GraphArgument("Int")] int? limit = null, [GraphArgument("Int")] int? page = null)
    {
        return gameData.GetMethodValue<GameMapPagination>("maps", limit, page);
    }

    [GraphMethod("npc")]
    public static GameNPC Npc(this GameData  gameData, [GraphArgument("Int")] int? id = null)
    {
        return gameData.GetMethodValue<GameNPC>("npc", id);
    }

    [GraphMethod("npcs")]
    public static GameNPCPagination Npcs(this GameData  gameData, [GraphArgument("Int")] int? limit = null, [GraphArgument("Int")] int? page = null)
    {
        return gameData.GetMethodValue<GameNPCPagination>("npcs", limit, page);
    }

    [GraphMethod("zone")]
    public static GameZone Zone(this GameData  gameData, [GraphArgument("Int")] int? id = null)
    {
        return gameData.GetMethodValue<GameZone>("zone", id);
    }

    [GraphMethod("zones")]
    public static GameZonePagination Zones(this GameData  gameData, [GraphArgument("Int")] int? limit = null, [GraphArgument("Int")] int? page = null)
    {
        return gameData.GetMethodValue<GameZonePagination>("zones", limit, page);
    }

}

/// <summary>
/// The game object contains collections of data such as NPCs, classes, abilities, items, maps, etc. Game data only changes when major game patches are released, so you should cache results for as long as possible and only update when new content is released for the game.
/// </summary>
public partial class GameData : GraphQLTypeBase
{
    private LazyProperty<GameAbilityPagination> _abilities = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public GameAbilityPagination Abilities => _abilities.Value(() => GetFirstMethodValue<GameAbilityPagination>("abilities"));

    private LazyProperty<GameAbility> _ability = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public GameAbility Ability => _ability.Value(() => GetFirstMethodValue<GameAbility>("ability"));

    private LazyProperty<GameAchievement> _achievement = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public GameAchievement Achievement => _achievement.Value(() => GetFirstMethodValue<GameAchievement>("achievement"));

    private LazyProperty<GameAchievementPagination> _achievements = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public GameAchievementPagination Achievements => _achievements.Value(() => GetFirstMethodValue<GameAchievementPagination>("achievements"));

    private LazyProperty<GameAffix> _affix = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public GameAffix Affix => _affix.Value(() => GetFirstMethodValue<GameAffix>("affix"));

    /// <summary>
    /// The affixes for the game.
    /// </summary>
    [JsonPropertyName("affixes")]
    public List<GameAffix> Affixes { get; set; }

    private LazyProperty<GameClass> _class = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public GameClass Class => _class.Value(() => GetFirstMethodValue<GameClass>("class"));

    private LazyProperty<List<GameClass>> _classes = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public List<GameClass> Classes => _classes.Value(() => GetFirstMethodValue<List<GameClass>>("classes"));

    private LazyProperty<GameEnchant> _enchant = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public GameEnchant Enchant => _enchant.Value(() => GetFirstMethodValue<GameEnchant>("enchant"));

    private LazyProperty<GameEnchantPagination> _enchants = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public GameEnchantPagination Enchants => _enchants.Value(() => GetFirstMethodValue<GameEnchantPagination>("enchants"));

    /// <summary>
    /// Obtain all the factions that guilds and players can belong to.
    /// </summary>
    [JsonPropertyName("factions")]
    public List<GameFaction> Factions { get; set; }

    private LazyProperty<GameItem> _item = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public GameItem Item => _item.Value(() => GetFirstMethodValue<GameItem>("item"));

    private LazyProperty<GameItemSet> _item_set = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public GameItemSet Item_set => _item_set.Value(() => GetFirstMethodValue<GameItemSet>("item_set"));

    private LazyProperty<GameItemSetPagination> _item_sets = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public GameItemSetPagination Item_sets => _item_sets.Value(() => GetFirstMethodValue<GameItemSetPagination>("item_sets"));

    private LazyProperty<GameItemPagination> _items = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public GameItemPagination Items => _items.Value(() => GetFirstMethodValue<GameItemPagination>("items"));

    private LazyProperty<GameMap> _map = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public GameMap Map => _map.Value(() => GetFirstMethodValue<GameMap>("map"));

    private LazyProperty<GameMapPagination> _maps = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public GameMapPagination Maps => _maps.Value(() => GetFirstMethodValue<GameMapPagination>("maps"));

    private LazyProperty<GameNPC> _npc = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public GameNPC Npc => _npc.Value(() => GetFirstMethodValue<GameNPC>("npc"));

    private LazyProperty<GameNPCPagination> _npcs = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public GameNPCPagination Npcs => _npcs.Value(() => GetFirstMethodValue<GameNPCPagination>("npcs"));

    private LazyProperty<GameZone> _zone = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public GameZone Zone => _zone.Value(() => GetFirstMethodValue<GameZone>("zone"));

    private LazyProperty<GameZonePagination> _zones = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public GameZonePagination Zones => _zones.Value(() => GetFirstMethodValue<GameZonePagination>("zones"));

}
