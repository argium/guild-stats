//---------------------------------------------------------------------
// This code was automatically generated by Linq2GraphQL
// Please don't edit this file
// Github:https://github.com/linq2graphql/linq2graphql.client
// Url: https://linq2graphql.com
//---------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Linq2GraphQL.Client;
using Linq2GraphQL.Client.Common;

namespace WarcraftLogs.Public;


/// <summary>
/// The ReportDungeonPull represents a single pull that occurs in a containing dungeon.
/// </summary>
public partial class ReportDungeonPull : GraphQLTypeBase
{
    /// <summary>
    /// The bounding box that encloses the positions of all players/enemies in the fight.
    /// </summary>
    [JsonPropertyName("boundingBox")]
    public ReportMapBoundingBox BoundingBox { get; set; }

    /// <summary>
    /// The encounter ID of the fight. If the ID is 0, the fight is considered a trash fight.
    /// </summary>
    [JsonPropertyName("encounterID")]
    public int EncounterID { get; set; }

    /// <summary>
    /// The end time of the fight. This is a timestamp with millisecond precision that is relative to the start of the report, i.e., the start of the report is considered time 0.
    /// </summary>
    [JsonPropertyName("endTime")]
    public double EndTime { get; set; }

    /// <summary>
    /// Information about enemies involved in the fight. Includes report IDs, instance counts, and instance group counts for each NPC.
    /// </summary>
    [JsonPropertyName("enemyNPCs")]
    public List<ReportDungeonPullNPC> EnemyNPCs { get; set; }

    /// <summary>
    /// The report ID of the fight. This ID can be used to fetch only events, tables or graphs for this fight.
    /// </summary>
    [JsonPropertyName("id")]
    public int Id { get; set; }

    /// <summary>
    /// Whether or not the fight was a boss kill, i.e., successful. If this field is false, it means the fight was an incomplete run, etc..
    /// </summary>
    [JsonPropertyName("kill")]
    public bool? Kill { get; set; }

    /// <summary>
    /// All the maps that were involved in a pull.
    /// </summary>
    [JsonPropertyName("maps")]
    public List<ReportMap> Maps { get; set; }

    /// <summary>
    /// The name of the fight.
    /// </summary>
    [JsonPropertyName("name")]
    public string Name { get; set; }

    /// <summary>
    /// The start time of the fight. This is a timestamp with millisecond precision that is relative to the start of the report, i.e., the start of the report is considered time 0.
    /// </summary>
    [JsonPropertyName("startTime")]
    public double StartTime { get; set; }

    /// <summary>
    /// The x position of the first mob damaged in the pull at the time this damage happens. Used to establish a marker position to represent where the pull took place.
    /// </summary>
    [JsonPropertyName("x")]
    public int X { get; set; }

    /// <summary>
    /// The y position of the first mob damaged in the pull at the time this damage happens. Used to establish a marker position to represent where the pull took place.
    /// </summary>
    [JsonPropertyName("y")]
    public int Y { get; set; }

}
