//---------------------------------------------------------------------
// This code was automatically generated by Linq2GraphQL
// Please don't edit this file
// Github:https://github.com/linq2graphql/linq2graphql.client
// Url: https://linq2graphql.com
//---------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Linq2GraphQL.Client;
using Linq2GraphQL.Client.Common;

namespace WarcraftLogs.Public;


public static class WorldDataExtensions
{
    [GraphMethod("encounter")]
    public static Encounter Encounter(this WorldData  worldData, [GraphArgument("Int")] int? id = null)
    {
        return worldData.GetMethodValue<Encounter>("encounter", id);
    }

    [GraphMethod("expansion")]
    public static Expansion Expansion(this WorldData  worldData, [GraphArgument("Int")] int? id = null)
    {
        return worldData.GetMethodValue<Expansion>("expansion", id);
    }

    [GraphMethod("region")]
    public static Region Region(this WorldData  worldData, [GraphArgument("Int")] int? id = null)
    {
        return worldData.GetMethodValue<Region>("region", id);
    }

    [GraphMethod("server")]
    public static Server Server(this WorldData  worldData, [GraphArgument("Int")] int? id = null, [GraphArgument("String")] string region = null, [GraphArgument("String")] string slug = null)
    {
        return worldData.GetMethodValue<Server>("server", id, region, slug);
    }

    [GraphMethod("subregion")]
    public static Subregion Subregion(this WorldData  worldData, [GraphArgument("Int")] int? id = null)
    {
        return worldData.GetMethodValue<Subregion>("subregion", id);
    }

    [GraphMethod("zone")]
    public static Zone Zone(this WorldData  worldData, [GraphArgument("Int")] int? id = null)
    {
        return worldData.GetMethodValue<Zone>("zone", id);
    }

    [GraphMethod("zones")]
    public static List<Zone> Zones(this WorldData  worldData, [GraphArgument("Int")] int? expansion_id = null)
    {
        return worldData.GetMethodValue<List<Zone>>("zones", expansion_id);
    }

}

/// <summary>
/// The world data object contains collections of data such as expansions, zones, encounters, regions, subregions, etc.
/// </summary>
public partial class WorldData : GraphQLTypeBase
{
    private LazyProperty<Encounter> _encounter = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public Encounter Encounter => _encounter.Value(() => GetFirstMethodValue<Encounter>("encounter"));

    private LazyProperty<Expansion> _expansion = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public Expansion Expansion => _expansion.Value(() => GetFirstMethodValue<Expansion>("expansion"));

    /// <summary>
    /// The set of all expansions supported by the site.
    /// </summary>
    [JsonPropertyName("expansions")]
    public List<Expansion> Expansions { get; set; }

    private LazyProperty<Region> _region = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public Region Region => _region.Value(() => GetFirstMethodValue<Region>("region"));

    /// <summary>
    /// The set of all regions supported by the site.
    /// </summary>
    [JsonPropertyName("regions")]
    public List<Region> Regions { get; set; }

    private LazyProperty<Server> _server = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public Server Server => _server.Value(() => GetFirstMethodValue<Server>("server"));

    private LazyProperty<Subregion> _subregion = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public Subregion Subregion => _subregion.Value(() => GetFirstMethodValue<Subregion>("subregion"));

    private LazyProperty<Zone> _zone = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public Zone Zone => _zone.Value(() => GetFirstMethodValue<Zone>("zone"));

    private LazyProperty<List<Zone>> _zones = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public List<Zone> Zones => _zones.Value(() => GetFirstMethodValue<List<Zone>>("zones"));

}
