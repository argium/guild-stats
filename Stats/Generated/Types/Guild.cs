//---------------------------------------------------------------------
// This code was automatically generated by Linq2GraphQL
// Please don't edit this file
// Github:https://github.com/linq2graphql/linq2graphql.client
// Url: https://linq2graphql.com
//---------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Linq2GraphQL.Client;
using Linq2GraphQL.Client.Common;

namespace WarcraftLogs.Public;


public static class GuildExtensions
{
    [GraphMethod("attendance")]
    public static GuildAttendancePagination Attendance(this Guild  guild, [GraphArgument("Int")] int? guildTagID = null, [GraphArgument("Int")] int? limit = null, [GraphArgument("Int")] int? page = null, [GraphArgument("Int")] int? zoneID = null)
    {
        return guild.GetMethodValue<GuildAttendancePagination>("attendance", guildTagID, limit, page, zoneID);
    }

    [GraphMethod("members")]
    public static CharacterPagination Members(this Guild  guild, [GraphArgument("Int")] int? limit = null, [GraphArgument("Int")] int? page = null)
    {
        return guild.GetMethodValue<CharacterPagination>("members", limit, page);
    }

    [GraphMethod("zoneRanking")]
    public static GuildZoneRankings ZoneRanking(this Guild  guild, [GraphArgument("Int")] int? zoneId = null)
    {
        return guild.GetMethodValue<GuildZoneRankings>("zoneRanking", zoneId);
    }

}

/// <summary>
/// A single guild. Guilds earn their own rankings and contain characters. They may correspond to a guild in-game or be a custom guild created just to hold reports and rankings.
/// </summary>
public partial class Guild : GraphQLTypeBase
{
    private LazyProperty<GuildAttendancePagination> _attendance = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public GuildAttendancePagination Attendance => _attendance.Value(() => GetFirstMethodValue<GuildAttendancePagination>("attendance"));

    /// <summary>
    /// Whether or not the guild has competition mode enabled.
    /// </summary>
    [JsonPropertyName("competitionMode")]
    public bool CompetitionMode { get; set; }

    /// <summary>
    /// The description for the guild that is displayed with the guild name on the site.
    /// </summary>
    [JsonPropertyName("description")]
    public string Description { get; set; }

    /// <summary>
    /// The faction of the guild.
    /// </summary>
    [JsonPropertyName("faction")]
    public GameFaction Faction { get; set; }

    /// <summary>
    /// The ID of the guild.
    /// </summary>
    [JsonPropertyName("id")]
    public int Id { get; set; }

    /// <summary>
    /// The name of the guild.
    /// </summary>
    [JsonPropertyName("name")]
    public string Name { get; set; }

    /// <summary>
    /// The server that the guild belongs to.
    /// </summary>
    [JsonPropertyName("server")]
    public Server Server { get; set; }

    /// <summary>
    /// Whether or not the guild has stealth mode enabled.
    /// </summary>
    [JsonPropertyName("stealthMode")]
    public bool StealthMode { get; set; }

    /// <summary>
    /// The tags used to label reports. In the site UI, these are called raid teams.
    /// </summary>
    [JsonPropertyName("tags")]
    public List<GuildTag> Tags { get; set; }

    private LazyProperty<CharacterPagination> _members = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public CharacterPagination Members => _members.Value(() => GetFirstMethodValue<CharacterPagination>("members"));

    /// <summary>
    /// The current user's rank within the guild. Only accessible via user authentication with the "view-user-profile" scope.
    /// </summary>
    [JsonPropertyName("currentUserRank")]
    public GuildRank? CurrentUserRank { get; set; }

    private LazyProperty<GuildZoneRankings> _zoneRanking = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public GuildZoneRankings ZoneRanking => _zoneRanking.Value(() => GetFirstMethodValue<GuildZoneRankings>("zoneRanking"));

}
