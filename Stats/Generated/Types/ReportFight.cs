//---------------------------------------------------------------------
// This code was automatically generated by Linq2GraphQL
// Please don't edit this file
// Github:https://github.com/linq2graphql/linq2graphql.client
// Url: https://linq2graphql.com
//---------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Linq2GraphQL.Client;
using Linq2GraphQL.Client.Common;

namespace WarcraftLogs.Public;


public static class ReportFightExtensions
{
    [GraphMethod("talentImportCode")]
    public static string TalentImportCode(this ReportFight  reportFight, [GraphArgument("Int!")] int actorID)
    {
        return reportFight.GetMethodValue<string>("talentImportCode", actorID);
    }

}

/// <summary>
/// The ReportFight represents a single fight that occurs in the report.
/// </summary>
public partial class ReportFight : GraphQLTypeBase
{
    /// <summary>
    /// The average item level of the players in the fight.
    /// </summary>
    [JsonPropertyName("averageItemLevel")]
    public double? AverageItemLevel { get; set; }

    /// <summary>
    /// The percentage health of the active boss or bosses at the end of a fight.
    /// </summary>
    [JsonPropertyName("bossPercentage")]
    public double? BossPercentage { get; set; }

    /// <summary>
    /// The bounding box that encloses the positions of all players/enemies in the fight.
    /// </summary>
    [JsonPropertyName("boundingBox")]
    public ReportMapBoundingBox BoundingBox { get; set; }

    /// <summary>
    /// The season ID of a Classic fight. Will only be nonzero for Season of Mastery in Vanilla for now.
    /// </summary>
    [JsonPropertyName("classicSeasonID")]
    public int? ClassicSeasonID { get; set; }

    /// <summary>
    /// Whether or not a fight represents an entire raid from start to finish, e.g., in Classic WoW a complete run of Blackwing Lair.
    /// </summary>
    [JsonPropertyName("completeRaid")]
    public bool CompleteRaid { get; set; }

    /// <summary>
    /// The difficulty setting for the raid, dungeon, or arena. Null for trash.
    /// </summary>
    [JsonPropertyName("difficulty")]
    public int? Difficulty { get; set; }

    /// <summary>
    /// For a dungeon, a list of pulls that occurred in the dungeon. Pulls have details such as the enemies involved in the pull and map info showing where the pull took place.
    /// </summary>
    [JsonPropertyName("dungeonPulls")]
    public List<ReportDungeonPull> DungeonPulls { get; set; }

    /// <summary>
    /// The encounter ID of the fight. If the ID is 0, the fight is considered a trash fight.
    /// </summary>
    [JsonPropertyName("encounterID")]
    public int EncounterID { get; set; }

    /// <summary>
    /// The end time of the fight. This is a timestamp with millisecond precision that is relative to the start of the report, i.e., the start of the report is considered time 0.
    /// </summary>
    [JsonPropertyName("endTime")]
    public double EndTime { get; set; }

    /// <summary>
    /// Information about enemy NPCs involved in the fight. Includes report IDs, instance counts, and instance group counts for each NPC.
    /// </summary>
    [JsonPropertyName("enemyNPCs")]
    public List<ReportFightNPC> EnemyNPCs { get; set; }

    /// <summary>
    /// Information about enemy pets involved in the fight. Includes report IDs, instance counts, and instance group counts for each pet.
    /// </summary>
    [JsonPropertyName("enemyPets")]
    public List<ReportFightNPC> EnemyPets { get; set; }

    /// <summary>
    /// The IDs of all players involved in a fight. These players can be referenced in the master data actors table to get detailed information about each participant.
    /// </summary>
    [JsonPropertyName("enemyPlayers")]
    public List<int?> EnemyPlayers { get; set; }

    /// <summary>
    /// The actual completion percentage of the fight. This is the field used to indicate how far into a fight a wipe was, since fights can be complicated and have multiple bosses, no bosses, bosses that heal, etc.
    /// </summary>
    [JsonPropertyName("fightPercentage")]
    public double? FightPercentage { get; set; }

    /// <summary>
    /// Information about friendly NPCs involved in the fight. Includes report IDs, instance counts, and instance group counts for each NPC.
    /// </summary>
    [JsonPropertyName("friendlyNPCs")]
    public List<ReportFightNPC> FriendlyNPCs { get; set; }

    /// <summary>
    /// Information about friendly pets involved in the fight. Includes report IDs, instance counts, and instance group counts for each pet.
    /// </summary>
    [JsonPropertyName("friendlyPets")]
    public List<ReportFightNPC> FriendlyPets { get; set; }

    /// <summary>
    /// The IDs of all players involved in a fight. These players can be referenced in the master data actors table to get detailed information about each participant.
    /// </summary>
    [JsonPropertyName("friendlyPlayers")]
    public List<int?> FriendlyPlayers { get; set; }

    /// <summary>
    /// The game zone the fight takes place in. This should not be confused with the zones used by the sites for rankings. This is the actual in-game zone info.
    /// </summary>
    [JsonPropertyName("gameZone")]
    public GameZone GameZone { get; set; }

    /// <summary>
    /// The hard mode level of the fight. Most fights don't support optional hard modes. This only applies to bosses like Sartharion.
    /// </summary>
    [JsonPropertyName("hardModeLevel")]
    public int? HardModeLevel { get; set; }

    /// <summary>
    /// The report ID of the fight. This ID can be used to fetch only events, tables or graphs for this fight.
    /// </summary>
    [JsonPropertyName("id")]
    public int Id { get; set; }

    /// <summary>
    /// Whether or not the fight is still in progress. If this field is false, it means the entire fight has been uploaded.
    /// </summary>
    [JsonPropertyName("inProgress")]
    public bool? InProgress { get; set; }

    /// <summary>
    /// The affixes for a Mythic+ dungeon.
    /// </summary>
    [JsonPropertyName("keystoneAffixes")]
    public List<int?> KeystoneAffixes { get; set; }

    /// <summary>
    /// The bonus field represents Bronze, Silver or Gold in Challenge Modes, or +1-+3 pushing of Mythic+ keys. It has the values 1, 2, and 3.
    /// </summary>
    [JsonPropertyName("keystoneBonus")]
    public int? KeystoneBonus { get; set; }

    /// <summary>
    /// The keystone level for a Mythic+ dungeon.
    /// </summary>
    [JsonPropertyName("keystoneLevel")]
    public int? KeystoneLevel { get; set; }

    /// <summary>
    /// The completion time for a Challenge Mode or Mythic+ Dungeon. This is the official time used on Blizzard leaderboards.
    /// </summary>
    [JsonPropertyName("keystoneTime")]
    public int? KeystoneTime { get; set; }

    /// <summary>
    /// Whether or not the fight was a boss kill, i.e., successful. If this field is false, it means the fight was a wipe or a failed run, etc..
    /// </summary>
    [JsonPropertyName("kill")]
    public bool? Kill { get; set; }

    /// <summary>
    /// The phase that the encounter was in when the fight ended. Counts up from 1 based off the phase type (i.e., normal phase vs intermission).
    /// </summary>
    [JsonPropertyName("lastPhase")]
    public int? LastPhase { get; set; }

    /// <summary>
    /// The phase that the encounter was in when the fight ended. Always increases from 0, so a fight with three real phases and two intermissions would count up from 0 to 4.
    /// </summary>
    [JsonPropertyName("lastPhaseAsAbsoluteIndex")]
    public int? LastPhaseAsAbsoluteIndex { get; set; }

    /// <summary>
    /// Whether or not the phase that the encounter was in when the fight ended was an intermission or not.
    /// </summary>
    [JsonPropertyName("lastPhaseIsIntermission")]
    public bool? LastPhaseIsIntermission { get; set; }

    /// <summary>
    /// The layer of a Torghast run.
    /// </summary>
    [JsonPropertyName("layer")]
    public int? Layer { get; set; }

    /// <summary>
    /// All the maps that were involved in a fight. For single bosses this will usually be a single map, but for dungeons it will typically be multiple maps.
    /// </summary>
    [JsonPropertyName("maps")]
    public List<ReportMap> Maps { get; set; }

    /// <summary>
    /// The name of the fight.
    /// </summary>
    [JsonPropertyName("name")]
    public string Name { get; set; }

    /// <summary>
    /// Some boss fights may be converted to trash fights (encounterID = 0). When this occurs, `originalEncounterID` contains the original ID of the encounter.
    /// </summary>
    [JsonPropertyName("originalEncounterID")]
    public int? OriginalEncounterID { get; set; }

    /// <summary>
    /// List of observed phase transitions during the fight.
    /// </summary>
    [JsonPropertyName("phaseTransitions")]
    public List<PhaseTransition> PhaseTransitions { get; set; }

    /// <summary>
    /// The official Blizzard rating for a completed Mythic+ dungeon or Torghast run.
    /// </summary>
    [JsonPropertyName("rating")]
    public double? Rating { get; set; }

    /// <summary>
    /// The group size for the raid, dungeon, or arena. Null for trash.
    /// </summary>
    [JsonPropertyName("size")]
    public int? Size { get; set; }

    /// <summary>
    /// The start time of the fight. This is a timestamp with millisecond precision that is relative to the start of the report, i.e., the start of the report is considered time 0.
    /// </summary>
    [JsonPropertyName("startTime")]
    public double StartTime { get; set; }

    private LazyProperty<string> _talentImportCode = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public string TalentImportCode => _talentImportCode.Value(() => GetFirstMethodValue<string>("talentImportCode"));

    /// <summary>
    /// If a wipe was explicitly called using the Companion app, then this field will contain the time. This is a timestamp with millisecond precision that is relative to the start of the report, i.e., the start of the report is considered time 0.
    /// </summary>
    [JsonPropertyName("wipeCalledTime")]
    public double? WipeCalledTime { get; set; }

}
