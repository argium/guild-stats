//---------------------------------------------------------------------
// This code was automatically generated by Linq2GraphQL
// Please don't edit this file
// Github:https://github.com/linq2graphql/linq2graphql.client
// Url: https://linq2graphql.com
//---------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Linq2GraphQL.Client;
using Linq2GraphQL.Client.Common;

namespace WarcraftLogs.Public;


public static class CharacterExtensions
{
    [GraphMethod("encounterRankings")]
    public static JSON EncounterRankings(this Character  character, [GraphArgument("Boolean")] bool? byBracket = null, [GraphArgument("String")] string className = null, [GraphArgument("RankingCompareType")] RankingCompareType? compare = null, [GraphArgument("Int")] int? difficulty = null, [GraphArgument("Int")] int? encounterID = null, [GraphArgument("Boolean")] bool? includeCombatantInfo = null, [GraphArgument("Boolean")] bool? includeOtherPlayers = null, [GraphArgument("Boolean")] bool? includeHistoricalGraph = null, [GraphArgument("Boolean")] bool? includePrivateLogs = null, [GraphArgument("CharacterRankingMetricType")] CharacterRankingMetricType? metric = null, [GraphArgument("Int")] int? partition = null, [GraphArgument("RoleType")] RoleType? role = null, [GraphArgument("Int")] int? size = null, [GraphArgument("String")] string specName = null, [GraphArgument("RankingTimeframeType")] RankingTimeframeType? timeframe = null)
    {
        return character.GetMethodValue<JSON>("encounterRankings", byBracket, className, compare, difficulty, encounterID, includeCombatantInfo, includeOtherPlayers, includeHistoricalGraph, includePrivateLogs, metric, partition, role, size, specName, timeframe);
    }

    [GraphMethod("gameData")]
    public static JSON GameData(this Character  character, [GraphArgument("Int")] int? specID = null, [GraphArgument("Boolean")] bool? forceUpdate = null)
    {
        return character.GetMethodValue<JSON>("gameData", specID, forceUpdate);
    }

    [GraphMethod("recentReports")]
    public static ReportPagination RecentReports(this Character  character, [GraphArgument("Int")] int? limit = null, [GraphArgument("Int")] int? page = null)
    {
        return character.GetMethodValue<ReportPagination>("recentReports", limit, page);
    }

    [GraphMethod("zoneRankings")]
    public static JSON ZoneRankings(this Character  character, [GraphArgument("Boolean")] bool? byBracket = null, [GraphArgument("String")] string className = null, [GraphArgument("RankingCompareType")] RankingCompareType? compare = null, [GraphArgument("Int")] int? difficulty = null, [GraphArgument("Boolean")] bool? includePrivateLogs = null, [GraphArgument("CharacterRankingMetricType")] CharacterRankingMetricType? metric = null, [GraphArgument("Int")] int? partition = null, [GraphArgument("RoleType")] RoleType? role = null, [GraphArgument("Int")] int? size = null, [GraphArgument("String")] string specName = null, [GraphArgument("RankingTimeframeType")] RankingTimeframeType? timeframe = null, [GraphArgument("Int")] int? zoneID = null)
    {
        return character.GetMethodValue<JSON>("zoneRankings", byBracket, className, compare, difficulty, includePrivateLogs, metric, partition, role, size, specName, timeframe, zoneID);
    }

}

/// <summary>
/// A player character. Characters can earn individual rankings and appear in reports.
/// </summary>
public partial class Character : GraphQLTypeBase
{
    /// <summary>
    /// The canonical ID of the character. If a character renames or transfers, then the canonical id can be used to identify the most recent version of the character.
    /// </summary>
    [JsonPropertyName("canonicalID")]
    public int CanonicalID { get; set; }

    /// <summary>
    /// Whether this character is claimed by the current user. Only accessible if accessed via the user API with the "view-user-profile" scope.
    /// </summary>
    [JsonPropertyName("claimed")]
    public bool? Claimed { get; set; }

    /// <summary>
    /// The class id of the character.
    /// </summary>
    [JsonPropertyName("classID")]
    public int ClassID { get; set; }

    private LazyProperty<JSON> _encounterRankings = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public JSON EncounterRankings => _encounterRankings.Value(() => GetFirstMethodValue<JSON>("encounterRankings"));

    /// <summary>
    /// The faction of the character.
    /// </summary>
    [JsonPropertyName("faction")]
    public GameFaction Faction { get; set; }

    private LazyProperty<JSON> _gameData = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public JSON GameData => _gameData.Value(() => GetFirstMethodValue<JSON>("gameData"));

    /// <summary>
    /// The guild rank of the character in their primary guild. This is not the user rank on the site, but the rank according to the game data, e.g., a Warcraft guild rank or an FFXIV Free Company rank.
    /// </summary>
    [JsonPropertyName("guildRank")]
    public int GuildRank { get; set; }

    /// <summary>
    /// All guilds that the character belongs to.
    /// </summary>
    [JsonPropertyName("guilds")]
    public List<Guild> Guilds { get; set; }

    /// <summary>
    /// Whether or not the character has all its rankings hidden.
    /// </summary>
    [JsonPropertyName("hidden")]
    public bool Hidden { get; set; }

    /// <summary>
    /// The ID of the character.
    /// </summary>
    [JsonPropertyName("id")]
    public int Id { get; set; }

    /// <summary>
    /// The level of the character.
    /// </summary>
    [JsonPropertyName("level")]
    public int Level { get; set; }

    /// <summary>
    /// The name of the character.
    /// </summary>
    [JsonPropertyName("name")]
    public string Name { get; set; }

    private LazyProperty<ReportPagination> _recentReports = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public ReportPagination RecentReports => _recentReports.Value(() => GetFirstMethodValue<ReportPagination>("recentReports"));

    /// <summary>
    /// The server that the character belongs to.
    /// </summary>
    [JsonPropertyName("server")]
    public Server Server { get; set; }

    private LazyProperty<JSON> _zoneRankings = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public JSON ZoneRankings => _zoneRankings.Value(() => GetFirstMethodValue<JSON>("zoneRankings"));

}
