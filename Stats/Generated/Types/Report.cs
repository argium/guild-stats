//---------------------------------------------------------------------
// This code was automatically generated by Linq2GraphQL
// Please don't edit this file
// Github:https://github.com/linq2graphql/linq2graphql.client
// Url: https://linq2graphql.com
//---------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Linq2GraphQL.Client;
using Linq2GraphQL.Client.Common;

namespace WarcraftLogs.Public;


public static class ReportExtensions
{
    [GraphMethod("events")]
    public static ReportEventPaginator Events(this Report  report, [GraphArgument("Float")] double? abilityID = null, [GraphArgument("EventDataType")] EventDataType? dataType = null, [GraphArgument("Int")] int? death = null, [GraphArgument("Int")] int? difficulty = null, [GraphArgument("Int")] int? encounterID = null, [GraphArgument("Float")] double? endTime = null, [GraphArgument("[Int]")] List<int?> fightIDs = null, [GraphArgument("String")] string filterExpression = null, [GraphArgument("HostilityType")] HostilityType? hostilityType = null, [GraphArgument("Boolean")] bool? includeResources = null, [GraphArgument("KillType")] KillType? killType = null, [GraphArgument("Int")] int? limit = null, [GraphArgument("String")] string sourceAurasAbsent = null, [GraphArgument("String")] string sourceAurasPresent = null, [GraphArgument("String")] string sourceClass = null, [GraphArgument("Int")] int? sourceID = null, [GraphArgument("Int")] int? sourceInstanceID = null, [GraphArgument("Float")] double? startTime = null, [GraphArgument("String")] string targetAurasAbsent = null, [GraphArgument("String")] string targetAurasPresent = null, [GraphArgument("String")] string targetClass = null, [GraphArgument("Int")] int? targetID = null, [GraphArgument("Int")] int? targetInstanceID = null, [GraphArgument("Boolean")] bool? translate = null, [GraphArgument("Boolean")] bool? useAbilityIDs = null, [GraphArgument("Boolean")] bool? useActorIDs = null, [GraphArgument("Int")] int? viewOptions = null, [GraphArgument("Int")] int? wipeCutoff = null)
    {
        return report.GetMethodValue<ReportEventPaginator>("events", abilityID, dataType, death, difficulty, encounterID, endTime, fightIDs, filterExpression, hostilityType, includeResources, killType, limit, sourceAurasAbsent, sourceAurasPresent, sourceClass, sourceID, sourceInstanceID, startTime, targetAurasAbsent, targetAurasPresent, targetClass, targetID, targetInstanceID, translate, useAbilityIDs, useActorIDs, viewOptions, wipeCutoff);
    }

    [GraphMethod("fights")]
    public static List<ReportFight> Fights(this Report  report, [GraphArgument("Int")] int? difficulty = null, [GraphArgument("Int")] int? encounterID = null, [GraphArgument("[Int]")] List<int?> fightIDs = null, [GraphArgument("KillType")] KillType? killType = null, [GraphArgument("Boolean")] bool? translate = null)
    {
        return report.GetMethodValue<List<ReportFight>>("fights", difficulty, encounterID, fightIDs, killType, translate);
    }

    [GraphMethod("graph")]
    public static JSON Graph(this Report  report, [GraphArgument("Float")] double? abilityID = null, [GraphArgument("GraphDataType")] GraphDataType? dataType = null, [GraphArgument("Int")] int? death = null, [GraphArgument("Int")] int? difficulty = null, [GraphArgument("Int")] int? encounterID = null, [GraphArgument("Float")] double? endTime = null, [GraphArgument("[Int]")] List<int?> fightIDs = null, [GraphArgument("String")] string filterExpression = null, [GraphArgument("HostilityType")] HostilityType? hostilityType = null, [GraphArgument("KillType")] KillType? killType = null, [GraphArgument("String")] string sourceAurasAbsent = null, [GraphArgument("String")] string sourceAurasPresent = null, [GraphArgument("String")] string sourceClass = null, [GraphArgument("Int")] int? sourceID = null, [GraphArgument("Int")] int? sourceInstanceID = null, [GraphArgument("Float")] double? startTime = null, [GraphArgument("String")] string targetAurasAbsent = null, [GraphArgument("String")] string targetAurasPresent = null, [GraphArgument("String")] string targetClass = null, [GraphArgument("Int")] int? targetID = null, [GraphArgument("Int")] int? targetInstanceID = null, [GraphArgument("Boolean")] bool? translate = null, [GraphArgument("Int")] int? viewOptions = null, [GraphArgument("ViewType")] ViewType? viewBy = null, [GraphArgument("Int")] int? wipeCutoff = null)
    {
        return report.GetMethodValue<JSON>("graph", abilityID, dataType, death, difficulty, encounterID, endTime, fightIDs, filterExpression, hostilityType, killType, sourceAurasAbsent, sourceAurasPresent, sourceClass, sourceID, sourceInstanceID, startTime, targetAurasAbsent, targetAurasPresent, targetClass, targetID, targetInstanceID, translate, viewOptions, viewBy, wipeCutoff);
    }

    [GraphMethod("masterData")]
    public static ReportMasterData MasterData(this Report  report, [GraphArgument("Boolean")] bool? translate = null)
    {
        return report.GetMethodValue<ReportMasterData>("masterData", translate);
    }

    [GraphMethod("playerDetails")]
    public static JSON PlayerDetails(this Report  report, [GraphArgument("Int")] int? difficulty = null, [GraphArgument("Int")] int? encounterID = null, [GraphArgument("Float")] double? endTime = null, [GraphArgument("[Int]")] List<int?> fightIDs = null, [GraphArgument("KillType")] KillType? killType = null, [GraphArgument("Float")] double? startTime = null, [GraphArgument("Boolean")] bool? translate = null, [GraphArgument("Boolean")] bool? includeCombatantInfo = null)
    {
        return report.GetMethodValue<JSON>("playerDetails", difficulty, encounterID, endTime, fightIDs, killType, startTime, translate, includeCombatantInfo);
    }

    [GraphMethod("rankings")]
    public static JSON Rankings(this Report  report, [GraphArgument("RankingCompareType")] RankingCompareType? compare = null, [GraphArgument("Int")] int? difficulty = null, [GraphArgument("Int")] int? encounterID = null, [GraphArgument("[Int]")] List<int?> fightIDs = null, [GraphArgument("ReportRankingMetricType")] ReportRankingMetricType? playerMetric = null, [GraphArgument("RankingTimeframeType")] RankingTimeframeType? timeframe = null)
    {
        return report.GetMethodValue<JSON>("rankings", compare, difficulty, encounterID, fightIDs, playerMetric, timeframe);
    }

    [GraphMethod("table")]
    public static JSON Table(this Report  report, [GraphArgument("Float")] double? abilityID = null, [GraphArgument("TableDataType")] TableDataType? dataType = null, [GraphArgument("Int")] int? death = null, [GraphArgument("Int")] int? difficulty = null, [GraphArgument("Int")] int? encounterID = null, [GraphArgument("Float")] double? endTime = null, [GraphArgument("[Int]")] List<int?> fightIDs = null, [GraphArgument("String")] string filterExpression = null, [GraphArgument("HostilityType")] HostilityType? hostilityType = null, [GraphArgument("KillType")] KillType? killType = null, [GraphArgument("String")] string sourceAurasAbsent = null, [GraphArgument("String")] string sourceAurasPresent = null, [GraphArgument("String")] string sourceClass = null, [GraphArgument("Int")] int? sourceID = null, [GraphArgument("Int")] int? sourceInstanceID = null, [GraphArgument("Float")] double? startTime = null, [GraphArgument("String")] string targetAurasAbsent = null, [GraphArgument("String")] string targetAurasPresent = null, [GraphArgument("String")] string targetClass = null, [GraphArgument("Int")] int? targetID = null, [GraphArgument("Int")] int? targetInstanceID = null, [GraphArgument("Boolean")] bool? translate = null, [GraphArgument("Int")] int? viewOptions = null, [GraphArgument("ViewType")] ViewType? viewBy = null, [GraphArgument("Int")] int? wipeCutoff = null)
    {
        return report.GetMethodValue<JSON>("table", abilityID, dataType, death, difficulty, encounterID, endTime, fightIDs, filterExpression, hostilityType, killType, sourceAurasAbsent, sourceAurasPresent, sourceClass, sourceID, sourceInstanceID, startTime, targetAurasAbsent, targetAurasPresent, targetClass, targetID, targetInstanceID, translate, viewOptions, viewBy, wipeCutoff);
    }

}

/// <summary>
/// A single report uploaded by a player to a guild or personal logs.
/// </summary>
public partial class Report : GraphQLTypeBase
{
    /// <summary>
    /// The report code, a unique value used to identify the report.
    /// </summary>
    [JsonPropertyName("code")]
    public string Code { get; set; }

    /// <summary>
    /// The end time of the report. This is a UNIX timestamp representing the timestamp of the last event contained in the report.
    /// </summary>
    [JsonPropertyName("endTime")]
    public double EndTime { get; set; }

    private LazyProperty<ReportEventPaginator> _events = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public ReportEventPaginator Events => _events.Value(() => GetFirstMethodValue<ReportEventPaginator>("events"));

    /// <summary>
    /// The number of exported segments in the report. This is how many segments have been processed for rankings.
    /// </summary>
    [JsonPropertyName("exportedSegments")]
    public int ExportedSegments { get; set; }

    private LazyProperty<List<ReportFight>> _fights = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public List<ReportFight> Fights => _fights.Value(() => GetFirstMethodValue<List<ReportFight>>("fights"));

    private LazyProperty<JSON> _graph = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public JSON Graph => _graph.Value(() => GetFirstMethodValue<JSON>("graph"));

    /// <summary>
    /// The guild that the report belongs to. If this is null, then the report was uploaded to the user's personal logs.
    /// </summary>
    [JsonPropertyName("guild")]
    public Guild Guild { get; set; }

    /// <summary>
    /// The guild tag that the report belongs to. If this is null, then the report was not tagged.
    /// </summary>
    [JsonPropertyName("guildTag")]
    public GuildTag GuildTag { get; set; }

    /// <summary>
    /// The user that uploaded the report.
    /// </summary>
    [JsonPropertyName("owner")]
    public User Owner { get; set; }

    private LazyProperty<ReportMasterData> _masterData = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public ReportMasterData MasterData => _masterData.Value(() => GetFirstMethodValue<ReportMasterData>("masterData"));

    private LazyProperty<JSON> _playerDetails = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public JSON PlayerDetails => _playerDetails.Value(() => GetFirstMethodValue<JSON>("playerDetails"));

    /// <summary>
    /// A list of all characters that ranked on kills in the report.
    /// </summary>
    [JsonPropertyName("rankedCharacters")]
    public List<Character> RankedCharacters { get; set; }

    private LazyProperty<JSON> _rankings = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public JSON Rankings => _rankings.Value(() => GetFirstMethodValue<JSON>("rankings"));

    /// <summary>
    /// The region of the report.
    /// </summary>
    [JsonPropertyName("region")]
    public Region Region { get; set; }

    /// <summary>
    /// The revision of the report. This number is increased when reports get re-exported.
    /// </summary>
    [JsonPropertyName("revision")]
    public int Revision { get; set; }

    /// <summary>
    /// The number of uploaded segments in the report.
    /// </summary>
    [JsonPropertyName("segments")]
    public int Segments { get; set; }

    /// <summary>
    /// The start time of the report. This is a UNIX timestamp representing the timestamp of the first event contained in the report.
    /// </summary>
    [JsonPropertyName("startTime")]
    public double StartTime { get; set; }

    private LazyProperty<JSON> _table = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphShadowProperty]
    public JSON Table => _table.Value(() => GetFirstMethodValue<JSON>("table"));

    /// <summary>
    /// A title for the report.
    /// </summary>
    [JsonPropertyName("title")]
    public string Title { get; set; }

    /// <summary>
    /// The visibility level of the report. The possible values are 'public', 'private', and 'unlisted'.
    /// </summary>
    [JsonPropertyName("visibility")]
    public string Visibility { get; set; }

    /// <summary>
    /// The principal zone that the report contains fights for. Null if no supported zone exists.
    /// </summary>
    [JsonPropertyName("zone")]
    public Zone Zone { get; set; }

    /// <summary>
    /// Whether this report has been archived. Events, tables, and graphs for archived reports are inaccessible unless the retrieving user has a subscription including archive access.
    /// </summary>
    [JsonPropertyName("archiveStatus")]
    public ReportArchiveStatus ArchiveStatus { get; set; }

    /// <summary>
    /// Phase information for all boss encounters observed in this report. This requires loading fight data, but does not double-charge API points if you load fights and phases.
    /// </summary>
    [JsonPropertyName("phases")]
    public List<EncounterPhases> Phases { get; set; }

}
