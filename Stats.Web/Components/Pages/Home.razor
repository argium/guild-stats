@page "/"
@using Stats.Domain
@inject StatsApiClient StatsApiClient

<PageTitle>OCE Guild Stats</PageTitle>

<h1>Undermine Raid Velocity</h1>

    @if (GuildData == null)
    {
        <p>@Message</p>
    }
    else
    {
        <RaidVelocityChart Data=GuildData />
    }

@code {
    Dictionary<string, ChartDataResponse>? GuildData;

    string Message = "Loading charts (this may take a minute...)";

    protected async override Task OnInitializedAsync()
    {
        GuildData = await LoadsGuildData();
    }

    async Task<Dictionary<string, ChartDataResponse>> LoadsGuildData()
    {
        var guilds = new List<GuildReportRequest>
        {
            new() { GuildName = "Resus", RealmName = "Frostmourne", Region = Region.US, Zone = Zone.NerubarPalace },
            new() { GuildName = "Da Bishes", RealmName = "Frostmourne", Region = Region.US, Zone = Zone.NerubarPalace },
            new() { GuildName = "Vortex", RealmName = "Barthilas", Region = Region.US, Zone = Zone.NerubarPalace },
        };

        var tasks = guilds.Select(FetchAsync);
        var results = await Task.WhenAll(tasks);
        return results
            .Where(resp => resp != null)
            .ToDictionary(resp => resp!.GuildAndRealm, resp => resp!);
    }

    async Task<ChartDataResponse?> FetchAsync(GuildReportRequest request)
    {
        try {
            var result = await StatsApiClient.GetGuildReportChartDataAsync(request);
            if (result.Value is not null) {
                return result.Value;
            }

            // race condition risks
            if (result.Error != null) {
                Message = $"{Message}<br/>Error: {result.Error.Title}";
            }
        }
        catch (Exception ex)
        {
            Message = $"{Message}<br/>{ex.Message}";
        }

        return null;
    }
}
