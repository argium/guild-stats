@page "/"
@using Stats.Domain
@* @attribute [StreamRendering(true)] *@
@* @rendermode InteractiveServer *@

@inject StatsApiClient StatsApi

<PageTitle>OCE Guild Stats</PageTitle>

<h1>Undermine Raid Velocity</h1>

<p>@Message</p>

@foreach (var chart in ChartDatas)
{
    if (chart == null) continue;

    if (chart.Error != null) {
        <p>@(chart.Error)</p>
    } else {
        <RaidVelocityChart GuildName="@(chart.GuildName)" RealmName="@(chart.RealmName)" Data="@(chart.Data)" />
    }
}

@code {
    int pending = 3;
    HomeChartData[] ChartDatas = new HomeChartData[3];

    string Message = "Loading charts, standby... (this may take upto 60 seconds)";

    private class HomeChartData
    {
        public HomeChartData(string guildName, string realmName, string? error, ChartData? data)
        {
            GuildName = guildName;
            RealmName = realmName;
            Error = error;
            Data = data;
        }

        public string GuildName { get; init; }
        public string RealmName { get; init; }
        public string? Error { get; init; }
        public ChartData? Data { get; init; }
    }

    protected override void OnInitialized()
    {
        FetchAsync(0, new() { GuildName = "Resus", RealmName = "Frostmourne", Region = Region.US, Zone = Zone.NerubarPalace });
        FetchAsync(1, new() { GuildName = "Da Bishes", RealmName = "Frostmourne", Region = Region.US, Zone = Zone.NerubarPalace });
        FetchAsync(2, new() { GuildName = "Vortex", RealmName = "Barthilas", Region = Region.US, Zone = Zone.NerubarPalace });
    }

    private async Task FetchAsync(int index, GuildReportRequest request)
    {
        try {
            ChartData? data = null;
            string? error = null;

            var result = await StatsApi.GetGuildReportChartDataAsync(request);
            if (result.Value is not null) {
                data = result.Value;
            }

            if (result.Error != null) {
                error = $"Error: {result.Error.Title}";
            }

            ChartDatas[index] = new(request.GuildName, request.RealmName, error, data);
        }
        catch (Exception ex) {
            ChartDatas[index] = new(request.GuildName, request.RealmName, $"Error: {ex.Message}", null);
        }
        finally {
            int x = Interlocked.Decrement(ref pending);
            if (x == 0)
            {
                Message = string.Empty;
                StateHasChanged();
            }
        }
    }
}
