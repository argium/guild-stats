@page "/charts"
@using Stats.Domain
@attribute [StreamRendering(true)]
@rendermode InteractiveServer

@inject StatsApiClient StatsApi
@inject IJSRuntime JS

<PageTitle>Charts</PageTitle>

<h1>Charts</h1>

<script>
  window.downloadFileFromStream = async (fileName, contentStreamReference) => {
    const arrayBuffer = await contentStreamReference.arrayBuffer();
    const blob = new Blob([arrayBuffer]);
    const url = URL.createObjectURL(blob);
    const anchorElement = document.createElement('a');
    anchorElement.href = url;
    anchorElement.download = fileName ?? '';
    anchorElement.click();
    anchorElement.remove();
    URL.revokeObjectURL(url);
  }
</script>

<EditForm Model="Model" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <div>
        Region:
        <InputSelect @bind-Value="Model!.Region" disabled="@(RequestPending)">
            <option value="">
                Select instance ...
            </option>
            <option checked="@(Model!.Region.ToString() == Region.US.ToString())"
                value="US">
                US
            </option>
        </InputSelect>
        <ValidationMessage For="@(() => Model.Region)" />
    </div>
    <div>
        <label>
            Realm:
            <InputText @bind-Value="Model!.RealmName" />
        </label>
        <ValidationMessage For="@(() => Model.RealmName)" />
    </div>
    <div>
        <label>
            Guild Name:
            <InputText @bind-Value="Model!.GuildName" />
        </label>
        <ValidationMessage For="@(() => Model.GuildName)" />
    </div>
    <div>
        Raid instance:
        <InputSelect @bind-Value="Model!.Zone">
            <option value="">
                Select instance ...
            </option>
            <option checked="@(Model!.Zone.ToString() == "NerubarPalace")"
                value="NerubarPalace">
                Nerub'ar Palace
            </option>
        <ValidationMessage For="@(() => Model.Zone)" />
        </InputSelect>
    </div>
    @* <div>
        <label>
            Region:
            <InputText @bind-Value="ChartForm!.RealmName" />
        </label>
    </div>         *@
    <div>
        <button type="submit" disabled="@(!context.Validate() || RequestPending)">Submit</button>
    </div>
    <div>@DisplayMessage</div>
</EditForm>

@if (Data is not null)
{
    <ApexChart TItem="DataPoint" Title="Report" Options="@(ChartOptions)">

    @*    <ApexPointSeries TItem="DataPoint"
                            Items="@(DataPoints)"
                            Name="@(Model.GuildName)"
                            SeriesType="SeriesType.Line"
                            XValue="e => e.Time"
                            YValue="e=> e.Value"
                            /> *@

    @foreach (var series in Data.Series)
    {
        <ApexPointSeries TItem="DataPoint"
                            Items="@(series.Value)"
                            Name="@(series.Key)"
                            SeriesType="SeriesType.Line"
                            XValue="e => e.Time"
                            YValue="e=> e.Value"
                            />
    }
    </ApexChart>
}

@code {
    ApexChartOptions<DataPoint> ChartOptions { get; set; }

    ChartData? Data { get; set; }
    IEnumerable<DataPoint>? DataPoints => Data.Series.SelectMany(x => x.Value);

    string DisplayMessage = string.Empty;

    bool RequestPending { get; set; }

    [SupplyParameterFromForm]
    GuildReportRequest? Model { get; set; }

    protected override void OnInitialized()
    {
        Model ??= new() {
                GuildName = "Resus",
                RealmName = "Frostmourne",
                Region = Region.US,
                Zone = Zone.NerubarPalace,
            };

        @* Data = new ChartData();
        Data.Series.Add("Series1", [new(DateTime.Parse("2024-01-01"), 10), new(DateTime.Parse("2024-01-02"), 15), new(DateTime.Parse("2024-01-03"), 20)]);
        Data.Series.Add("Series2", [new(DateTime.Parse("2024-01-04"), 20), new(DateTime.Parse("2024-01-05"), 15), new(DateTime.Parse("2024-01-06"), 10)]); *@

        ChartOptions ??= new ApexChartOptions<DataPoint>();
        ChartOptions.Chart.Width = 900;
        ChartOptions.Chart.Height = 500;
        ChartOptions.Stroke = new Stroke() {
            Width = 2
        };
    }

    private async void OnValidSubmit()
    {
        try {
            RequestPending = true;
            DisplayMessage = "Generating chart...";
            StateHasChanged();
            Data = await StatsApi.GetGuildReportChartDataAsync<ChartData>(Model!);
            ChartOptions.Xaxis = new XAxis()
            {
                Type = XAxisType.Datetime,
            };

            DisplayMessage = string.Empty;

            @* var fileStream = await StatsApi.GuildReportRequestAsync(Model!);
            using var streamRef = new DotNetStreamReference(stream: fileStream);
            await JS.InvokeVoidAsync("downloadFileFromStream", $"{Model!.GuildName}-{Model!.RealmName}.csv", streamRef);
            DisplayMessage = string.Empty; *@
        }
        catch (Exception ex) {
            DisplayMessage = $"Error: {ex.Message}";
        }
        finally {
            RequestPending = false;
            StateHasChanged();
        }
    }
}
