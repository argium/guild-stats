@page "/charts"
@using Stats.Domain
@attribute [StreamRendering(true)]
@rendermode InteractiveServer

@inject ILogger<Charts> Log
@inject StatsApiClient StatsApi
@inject IJSRuntime JS

<PageTitle>Charts</PageTitle>

<h1>Charts</h1>

<script>
  window.downloadFileFromStream = async (fileName, contentStreamReference) => {
    const arrayBuffer = await contentStreamReference.arrayBuffer();
    const blob = new Blob([arrayBuffer]);
    const url = URL.createObjectURL(blob);
    const anchorElement = document.createElement('a');
    anchorElement.href = url;
    anchorElement.download = fileName ?? '';
    anchorElement.click();
    anchorElement.remove();
    URL.revokeObjectURL(url);
  }
</script>

<EditForm Model="Model" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <div>
        Region:
        <InputSelect @bind-Value="Model!.Region" disabled="@(RequestPending)">
            <option value="">
                Select instance ...
            </option>
            <option checked="@(Model!.Region.ToString() == Region.US.ToString())"
                value="US">
                US
            </option>
        </InputSelect>
        <ValidationMessage For="@(() => Model.Region)" />
    </div>
    <div>
        <label>
            Realm:
            <InputText @bind-Value="Model!.RealmName" />
        </label>
        <ValidationMessage For="@(() => Model.RealmName)" />
    </div>
    <div>
        <label>
            Guild Name:
            <InputText @bind-Value="Model!.GuildName" />
        </label>
        <ValidationMessage For="@(() => Model.GuildName)" />
    </div>
    <div>
        Raid instance:
        <InputSelect @bind-Value="Model!.Zone">
            <option value="">
                Select instance ...
            </option>
            <option checked="@(Model!.Zone.ToString() == "Nerub'ar Palace")"
                value="NerubarPalace">
                Nerub'ar Palace
            </option>
        <ValidationMessage For="@(() => Model.Zone)" />
        </InputSelect>
    </div>
    @* <div>
        <label>
            Region:
            <InputText @bind-Value="ChartForm!.RealmName" />
        </label>
    </div>         *@
    <div>
        <button type="submit" disabled="@(!context.Validate() || RequestPending)">Submit</button>
    </div>
    <div>@DisplayMessage</div>
</EditForm>


@code {
    string DisplayMessage = string.Empty;

    bool RequestPending { get; set; }

    [SupplyParameterFromForm]
    GuildReportRequest? Model { get; set; }

    protected override void OnInitialized() => Model ??= new() {
        GuildName = "Resus",
        RealmName = "Frostmourne",
        Region = Region.US,
        Zone = Zone.NerubarPalace,
        FileType = FileType.CSV,
    };

    private async void OnValidSubmit()
    {


        try {
            RequestPending = true;
            DisplayMessage = "Generating chart...";
            StateHasChanged();
            var fileStream = await StatsApi.GetChartAsync(Model!);
            using var streamRef = new DotNetStreamReference(stream: fileStream);
            await JS.InvokeVoidAsync("downloadFileFromStream", $"{Model!.GuildName}-{Model!.RealmName}.csv", streamRef);
            DisplayMessage = string.Empty;
        }
        catch (Exception ex) {
            DisplayMessage = $"Error: {ex.Message}";
        }
        finally {
            RequestPending = false;
            StateHasChanged();
        }
    }

    @* private void Submit()
    {
        customValidation?.ClearErrors();

        var errors = new Dictionary<string, List<string>>();

        if (Model!.Classification == "Defense" &&
                string.IsNullOrEmpty(Model.Description))
        {
            errors.Add(nameof(Model.Description),
                [ "For a 'Defense' ship classification, " +
                "'Description' is required." ]);
        }

        if (errors.Any())
        {
            customValidation?.DisplayErrors(errors);
        }
        else
        {
            Log.LogInformation("Submit called: Processing the form");
        }
    }     *@

}
