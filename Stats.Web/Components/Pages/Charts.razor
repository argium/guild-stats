@page "/charts"
@using Stats.Domain
@attribute [StreamRendering(true)]
@rendermode InteractiveServer

@inject StatsApiClient StatsApi
@inject IJSRuntime JS

<PageTitle>Charts</PageTitle>

<h1>Charts</h1>

<script>
  window.downloadFileFromStream = async (fileName, contentStreamReference) => {
    const arrayBuffer = await contentStreamReference.arrayBuffer();
    const blob = new Blob([arrayBuffer]);
    const url = URL.createObjectURL(blob);
    const anchorElement = document.createElement('a');
    anchorElement.href = url;
    anchorElement.download = fileName ?? '';
    anchorElement.click();
    anchorElement.remove();
    URL.revokeObjectURL(url);
  }
</script>

<EditForm Model="Model" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <div>
        Region:
        <InputSelect @bind-Value="Model!.Region" disabled="@(RequestPending)">
            <option value="">
                Select instance ...
            </option>
            <option checked="@(Model!.Region.ToString() == Region.US.ToString())"
                value="US">
                US
            </option>
        </InputSelect>
        <ValidationMessage For="@(() => Model.Region)" />
    </div>
    <div>
        <label>
            Realm:
            <InputText @bind-Value="Model!.RealmName" />
        </label>
        <ValidationMessage For="@(() => Model.RealmName)" />
    </div>
    <div>
        <label>
            Guild Name:
            <InputText @bind-Value="Model!.GuildName" />
        </label>
        <ValidationMessage For="@(() => Model.GuildName)" />
    </div>
    <div>
        Raid instance:
        <InputSelect @bind-Value="Model!.Zone" disabled="@(ChartDisplayed)">
            <option value="">
                Select instance ...
            </option>
            <option checked="@(Model!.Zone.ToString() == "NerubarPalace")"
                value="NerubarPalace">
                Nerub'ar Palace
            </option>
        <ValidationMessage For="@(() => Model.Zone)" />
        </InputSelect>
    </div>
    @* <div>
        <label>
            Region:
            <InputText @bind-Value="ChartForm!.RealmName" />
        </label>
    </div>         *@
    <div>
        <button type="submit" disabled="@(!context.Validate() || RequestPending)">Submit</button>
    </div>
    <div>@DisplayMessage</div>
</EditForm>

@foreach (var data in Datas)
{
    <ApexChart TItem="DataPoint" Title="@(data.Key)" Options="@(ChartOptions[data.Key])">

        @*    <ApexPointSeries TItem="DataPoint"
                            Items="@(DataPoints)"
                            Name="@(Model.GuildName)"
                            SeriesType="SeriesType.Line"
                            XValue="e => e.Time"
                            YValue="e=> e.Value"
                            /> *@

        @foreach (var series in data.Value!.Series)
        {
            <ApexPointSeries TItem="DataPoint"
            Items="@(series.Value)"
            Name="@(series.Key)"
            SeriesType="SeriesType.Line"
            XValue="e => e.Time"
            YValue="e=> e.Value"
            />
        }
    </ApexChart>
}

@code {

    Dictionary<string, ChartData?> Datas { get; set; } = new();
    Dictionary<string, ApexChartOptions<DataPoint>?> ChartOptions { get; set; } = new();
    string DisplayMessage = string.Empty;
    bool RequestPending;
    bool ChartDisplayed;

    [SupplyParameterFromForm]
    GuildReportRequest? Model { get; set; }
    protected override void OnInitialized()
    {
        Model ??= new() {
                GuildName = "Resus",
                RealmName = "Frostmourne",
                Region = Region.US,
                Zone = Zone.NerubarPalace,
            };

        RequestPending = false;
        ChartDisplayed = false;
    }

    private async void OnValidSubmit()
    {
        try {
            RequestPending = true;
            DisplayMessage = "Generating chart...";
            StateHasChanged();

            var result = await StatsApi.GetGuildReportChartDataAsync(Model!);

            string key = $"{Model!.GuildName}-{Model!.RealmName}";
            if (result.Value is not null) {
                Datas.Add(key, result.Value);

                var options = new ApexChartOptions<DataPoint>();
                options.Chart.Width = 900;
                options.Chart.Height = 500;
                options.Stroke = new Stroke() {
                    Width = 2
                };
                options.Chart.Group = "reports";

                @* var range = DateTime.Now.ToUnixTimeMilliseconds()
                        - DateTime.Parse("2024-10-24").ToUnixTimeMilliseconds(); *@

                options.Xaxis = new XAxis() {
                    Type = XAxisType.Datetime,
                };
                ChartOptions.Add(key, options);
                Model!.GuildName = " ";
                DisplayMessage = string.Empty;
                ChartDisplayed = true;
            }

            if (result.Error != null) {
                DisplayMessage = $"Error: {result.Error.Title}";
            }

            @* var fileStream = await StatsApi.GuildReportRequestAsync(Model!);
            using var streamRef = new DotNetStreamReference(stream: fileStream);
            await JS.InvokeVoidAsync("downloadFileFromStream", $"{Model!.GuildName}-{Model!.RealmName}.csv", streamRef);
            DisplayMessage = string.Empty; *@
        }
        catch (Exception ex) {
            DisplayMessage = $"Error: {ex.Message}";
        }
        finally {
            RequestPending = false;
            StateHasChanged();
        }
    }
}
