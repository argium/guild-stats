@page "/charts"
@attribute [StreamRendering(true)]
@rendermode InteractiveServer

@inject ILogger<Charts> Log
@inject StatsApiClient StatsApi
@inject IJSRuntime JS

<PageTitle>Charts</PageTitle>

<h1>Charts</h1>

<script>
  window.downloadFileFromStream = async (fileName, contentStreamReference) => {
    const arrayBuffer = await contentStreamReference.arrayBuffer();
    const blob = new Blob([arrayBuffer]);
    const url = URL.createObjectURL(blob);
    const anchorElement = document.createElement('a');
    anchorElement.href = url;
    anchorElement.download = fileName ?? '';
    anchorElement.click();
    anchorElement.remove();
    URL.revokeObjectURL(url);
  }
</script>

<form method="post" EditContext="editContext" @onsubmit="Submit" @formname="chart-form">
    @* <CustomValidation @ref="customValidation" />
    <ValidationSummary /> *@
    <AntiforgeryToken />
    <div>
        <label>
            Guild Name:
            <InputText @bind-Value="Model!.GuildName" />
        </label>
    </div>
    <div>
        <label>
            Realm:
            <InputText @bind-Value="Model!.RealmName" />
        </label>
    </div>
    @* <div>
        <label>
            Region:
            <InputText @bind-Value="ChartForm!.RealmName" />
        </label>
    </div>         *@
    <div>
        <button type="submit">Submit</button>
    </div>
</form>


@code {
    @* private CustomValidation? customValidation; *@

    [SupplyParameterFromForm]
    ChartArgs? Model { get; set; }

    protected override void OnInitialized() => Model ??= new() { GuildName = "Resus", RealmName = "Frostmourne" };

    private async void Submit()
    {
        var fileStream = await StatsApi.GetChartAsync(Model!);

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", $"{Model!.GuildName}-{Model!.RealmName}.csv", streamRef);
    }

    @* private void Submit()
    {
        customValidation?.ClearErrors();

        var errors = new Dictionary<string, List<string>>();

        if (Model!.Classification == "Defense" &&
                string.IsNullOrEmpty(Model.Description))
        {
            errors.Add(nameof(Model.Description),
                [ "For a 'Defense' ship classification, " +
                "'Description' is required." ]);
        }

        if (errors.Any())
        {
            customValidation?.DisplayErrors(errors);
        }
        else
        {
            Log.LogInformation("Submit called: Processing the form");
        }
    }     *@

}
